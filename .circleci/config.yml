version: 2.1
commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
                      aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
                      aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
    
jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install  dependencies and build frontend
                  command: |
                    cd frontend 
                    npm install
                    npm run build 
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install dependencies and build backend
                  command: |
                    cd backend && 
                    npm install
                    npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/backend/dist
    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install dependencies and test frontend
                  command: |
                    cd frontend 
                    npm install
                    npm run test 
          

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install dependencies and test backend 
                  command: |
                    cd backend
                    npm install
                    npm run test 
                  environment:
                      NODE_OPTIONS: --max_old_space_size=8192

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install dependencies and scan frontend
                  command: |
                    cd frontend 
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit --audit-level=critical 

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install dependencies and scan backend
                  command: |
                    cd backend 
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit fix  --force
                    npm audit --audit-level=critical 
    deploy-infrastructure:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl
                      pip install awscli
                      
                  name: Ensure backend infrastructure exists
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  \
                      --tags project=udapeople
            - run:
                  name: Ensure frontend infrastructure exist
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  \
                      --tags project=udapeople
            - run:
                  name: Add backend ip to ansible inventory
                  command: |
                        aws ec2 describe-instances \
                        --filters "Name=tag:project,Values=udapeople" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID}



                      
workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - scan-backend:
                  requires: [build-backend]
            - deploy-infrastructure:
                requires: [test-frontend, test-backend, scan-frontend, scan-backend]
                filters:
                  branches:
                    only: [master]
