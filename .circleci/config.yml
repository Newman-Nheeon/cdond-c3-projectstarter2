version: 2.1
commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      echo "Destroying environment: << parameters.workflow_id >> "
                      aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
                      aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
                      aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
    
    revert-migrations:
        description: Revert the last migration
        parameters:
            workflow_id:
                type: string      
        steps:
            - run:
                  name: Revert migrations
                  when: on_fail
                  command: |
                      SUCCESS=$(curl --insecure  https://kvdb.io/BCkQQGfj9UgTpMpTV3sTdY/migration_<< parameters.workflow_id >>)
                        # Logic for reverting the database state
                      if (( $SUCCESS == 1 ));
                      then
                          cd ~/project/backend
                          npm install
                          npm run migration:revert 
                      else
                          echo "zero migration."
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install  dependencies and build frontend
                  command: |
                    cd frontend 
                    npm install
                    npm run build 
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install dependencies and build backend
                  command: |
                    cd backend && 
                    npm install
                    npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/backend/dist

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install dependencies and test frontend
                  command: |
                    cd frontend 
                    npm install
                    npm run test 

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install dependencies and test backend 
                  command: |
                    cd backend
                    npm install
                    npm run test 
                  environment:
                      NODE_OPTIONS: --max_old_space_size=8192

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Install dependencies and scan frontend
                  command: |
                    cd frontend 
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit --audit-level=critical 

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Install dependencies and scan backend
                  command: |
                    cd backend 
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit fix  --force
                    npm audit --audit-level=critical 

    deploy-infrastructure:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl
                      pip install awscli
            - run:     
                  name: Ensure backend infrastructure exists
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  \
                      --tags project=udapeople
            - run:
                  name: Ensure frontend infrastructure exist
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  \
                      --tags project=udapeople
            - run:
                  name: Add backend ip to ansible inventory
                  command: |
                        aws ec2 describe-instances \
                        --filters "Name=tag:project,Values=udapeople" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID}

    configure-infrastructure:
        docker:
            - image: python:3.7-alpine
              environment:
                  ANSIBLE_HOST_KEY_CHECKING: "no"
        steps:
            - checkout
            - run:
                  name: Install config dependencies
                  command: |
                      apk add --update tar gzip curl nodejs npm ansible zip
                      pip install awscli
            - add_ssh_keys:
                  fingerprints:
                      ["5d:68:50:50:19:a7:02:89:b3:81:26:79:bc:09:d4:a0"]
            - attach_workspace:
                  at: ~/
            - run:
                  name: Configure Server
                  command: |
                      cd .circleci/ansible
                      cat inventory.txt
                      ansible-playbook -i inventory.txt configure-server.yml
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID}

    run-migrations:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl nodejs npm zip
                      pip install awscli
            - run:
                  name: Run migrations
                  command: |
                      cd backend
                      npm install
                      npm run migrations > migration_dump.txt
                      cat migration_dump.txt
            - run:
                  name: Send migration status to kvdb.io 
                  command: |   
                      if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                      then
                          curl https://kvdb.io/BCkQQGfj9UgTpMpTV3sTdY/migration_${CIRCLE_WORKFLOW_ID}  -d '1'
                        
                      fi
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID}

    deploy-frontend:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout

            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl nodejs npm zip
                      pip install awscli
            - attach_workspace:
                  at: ~/     

            - run:
                  name: Get backend url
                  command: |
                       export BACKEND_IP=$(aws ec2 describe-instances \
                        --filters "Name=tag:project,Values=udapeople" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text)
                       export API_URL="http://${BACKEND_IP}:3030"
                       echo "${API_URL}"     
                       echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                       cat frontend/.env   
            - run:
                  name: Build and Deploy frontend objects
                  command: |
                       cd frontend
                       npm install
                       npm run build
                       tar -czvf artifact-"${CIRCLE_WORKFLOW_ID}".tar.gz dist
                       aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"
            - revert-migrations:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"

    deploy-backend:
        docker:
            - image: python:3.7-alpine
        environment:
            ANSIBLE_HOST_KEY_CHECKING: "no"
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      ["5d:68:50:50:19:a7:02:89:b3:81:26:79:bc:09:d4:a0"] 
            - attach_workspace:
                  at: ~/

            - run:
                  name: Install zip
                  command: |
                      apk add --update zip unzip
                # install curl
            - run:
                  name: Install curl
                  command: |
                        apk add --update curl
            - run:
                  name: Install ansible
                  working_directory: ./.circleci/ansible
                  command: |
                       apk add --update ansible 
            - run:
                  name: Install aws cli
                  command: |
                       pip install awscli
            - run:
                  name: Install nodejs
                  command: |
                       apk add --update nodejs
            - run:
                  name: Install npm
                  command: |
                       apk add --update npm openssh rsync
            - run:
                  name: Deploy backend
                  command: |
                      cd backend/dist
                      npm i
                      npm run build
                      npm audit fix --audit-level=critical --force
                      npm audit fix --force
                      cp ../package* .
                      zip -rq dist.zip *
                      mkdir -p ~/project/.circleci/ansible/roles/deploy-backend/files
                      mv dist.zip ~/project/.circleci/ansible/roles/deploy-backend/files/
                      echo "Contents of the inventory.txt file is ......."
                      cat inventory.txt
                      ansible-playbook -i inventory.txt deploy-backend.yml

            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"
            - revert-migrations:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"      
    smoke-test:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update tar gzip curl
                      pip install awscli
            - attach_workspace:
                  at: ~/
            - run:
                  name: Smoke Test frontend app
                  command: |
                      URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"            
                      echo ${URL} 
                      if curl -s ${URL} | grep "Welcome"
                      then
                        # Change this to 0 after the job fails
                          return 0
                      else
                          return 1
                      fi
            - run:
                  name: Get backend url
                  command: |
                      export BACKEND_IP=$(aws ec2 describe-instances \
                        --filters "Name=tag:project,Values=udapeople" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text)
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "${API_URL}"
                      if curl "${API_URL}/api/status" | grep "ok"
                      then
                          return 0
                      else
                          return 1
                      fi
            
            
            - destroy-environment:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"
            - revert-migrations:
                  workflow_id: "${CIRCLE_WORKFLOW_ID}"

    cloudfront-update:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update curl
                      pip install awscli
            - run:
                  name: update cloudfront distribution
                  command: |
                       aws cloudformation deploy \
                            --template-file .circleci/files/cloudfront.yml \
                            --stack-name InitialStack \
                            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID}" \
                            --tags project=udapeople

    cleanup:
        docker:
            - image: python:3.7-alpine
        steps:
            - checkout
            - run:
                name: Install dependencies
                command: |
                    apk add --update curl bash
                    pip install awscli
            - run:
                name: Clean up old stacks
                shell: /bin/bash
                command: |
                    # Fetch the Old workflow ID
                    export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
                    echo OldWorkflowID: "${OldWorkflowID}"
                    echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID}"
                    # Fetch the stack names          
                    export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                    echo Stack names: "${STACKS[@]}"
                    if [[ "${CIRCLE_WORKFLOW_ID}" =~ "${OldWorkflowID}" ]]
                    then
                        echo "Removing previous stack"
                        aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
                        aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
                        aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
                    
                      

                      
workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - scan-backend:
                  requires: [build-backend]
            - deploy-infrastructure:
                requires: [test-frontend, test-backend, scan-frontend, scan-backend]
                filters:
                  branches:
                    only: [master]
    
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            - deploy-frontend:
                  requires: [run-migrations]
            - deploy-backend:
                  requires: [run-migrations]
            - smoke-test:
                  requires: [deploy-backend, deploy-frontend]